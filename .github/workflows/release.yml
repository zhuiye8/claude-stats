name: 发布新版本

on:
  push:
    tags:
      - 'v*'  # 当推送 v1.0.0 这样的标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  # 简化构建，只构建主要平台，减少资源消耗
  build-linux:
    name: 构建Linux版本
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 构建Linux二进制文件
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        GIT_COMMIT=${GITHUB_SHA::8}
        
        # 只构建Linux AMD64，最常用的平台
        GOOS=linux GOARCH=amd64 go build -ldflags="-X main.Version=$VERSION -X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" -o claude-stats-linux-amd64 .
        
        # 创建压缩包
        tar -czf claude-stats-linux-amd64.tar.gz claude-stats-linux-amd64 README.md LICENSE

    - name: 上传Linux构建产物
      uses: actions/upload-artifact@v3
      with:
        name: linux-binary
        path: claude-stats-linux-amd64.tar.gz

  build-windows:
    name: 构建Windows版本
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 构建Windows二进制文件
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        GIT_COMMIT=${GITHUB_SHA::8}
        
        # 构建Windows AMD64
        GOOS=windows GOARCH=amd64 go build -ldflags="-X main.Version=$VERSION -X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" -o claude-stats-windows-amd64.exe .
        
        # 创建zip包
        zip claude-stats-windows-amd64.zip claude-stats-windows-amd64.exe README.md LICENSE

    - name: 上传Windows构建产物
      uses: actions/upload-artifact@v3
      with:
        name: windows-binary
        path: claude-stats-windows-amd64.zip

  # macOS构建可能消耗更多资源，单独处理
  build-macos:
    name: 构建macOS版本
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Go环境
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: 构建macOS二进制文件
      run: |
        VERSION=${GITHUB_REF#refs/tags/}
        BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
        GIT_COMMIT=${GITHUB_SHA::8}
        
        # 构建macOS AMD64 (Intel Mac)
        GOOS=darwin GOARCH=amd64 go build -ldflags="-X main.Version=$VERSION -X main.BuildTime=$BUILD_TIME -X main.GitCommit=$GIT_COMMIT" -o claude-stats-darwin-amd64 .
        tar -czf claude-stats-darwin-amd64.tar.gz claude-stats-darwin-amd64 README.md LICENSE

    - name: 上传macOS构建产物
      uses: actions/upload-artifact@v3
      with:
        name: macos-binary
        path: claude-stats-darwin-amd64.tar.gz

  release:
    name: 创建Release
    needs: [build-linux, build-windows, build-macos]
    runs-on: ubuntu-latest
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 下载所有构建产物
      uses: actions/download-artifact@v3

    - name: 创建Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          linux-binary/*
          windows-binary/*
          macos-binary/*
        generate_release_notes: true
        draft: false
        prerelease: false
        body: |
          ## 🎉 Claude Stats ${{ github.ref_name }}

          **完美的Claude Code使用统计工具新版本发布！**

          ### 📦 快速下载

          **Windows用户:**
          ```powershell
          curl -L https://github.com/zhuiye8/claude-stats/releases/download/${{ github.ref_name }}/claude-stats-windows-amd64.zip -o claude-stats.zip
          Expand-Archive claude-stats.zip
          ```

          **macOS用户 (Intel):**
          ```bash
          curl -L https://github.com/zhuiye8/claude-stats/releases/download/${{ github.ref_name }}/claude-stats-darwin-amd64.tar.gz -o claude-stats.tar.gz
          tar -xzf claude-stats.tar.gz
          chmod +x claude-stats-darwin-amd64
          ```

          **Linux用户:**
          ```bash
          curl -L https://github.com/zhuiye8/claude-stats/releases/download/${{ github.ref_name }}/claude-stats-linux-amd64.tar.gz -o claude-stats.tar.gz
          tar -xzf claude-stats.tar.gz
          chmod +x claude-stats-linux-amd64
          ```

          ### ✨ 主要功能
          - 🔍 智能识别API模式和订阅模式
          - 📊 完整的token统计和成本分析
          - 🎨 美化的终端输出和彩色支持
          - 🌍 跨平台支持（Windows、macOS、Linux、WSL）
          - 📈 可视化进度条和图表
          - 💰 订阅计划建议和成本优化

          ### 🚀 使用方法
          下载后直接运行：
          ```bash
          ./claude-stats-linux-amd64 analyze
          # 或 Windows: claude-stats-windows-amd64.exe analyze
          # 或 macOS: ./claude-stats-darwin-amd64 analyze
          ```

          ### 📖 本地构建
          如果您遇到下载问题，可以本地构建：
          ```bash
          git clone https://github.com/zhuiye8/claude-stats.git
          cd claude-stats
          go build -o claude-stats .
          ```

          更多使用方法请查看 [README.md](https://github.com/zhuiye8/claude-stats#readme)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 